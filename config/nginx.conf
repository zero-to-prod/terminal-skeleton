user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    server {
        listen 80;
        # server_name ${SS_DOMAIN} ${VR_DOMAIN};
        # include partials/server.conf;

        # # Certbot webroot folder / override
        # location /.well-known/acme-challenge {
        #     root /var/www/challenges;
        #     try_files $uri $uri/ =404;
        # }

        # # Re-use existing blocks so we can serve both HTTP & HTTPS until we're ready to swap.
        # location ~ /(api|graphql|webhooks|assets) {
        #     try_files $uri $uri/ /index.php?$query_string;
        # }

        # location ~ \.php$ {
        #     include partials/php.conf;
        # }

        location / {
            root /usr/share/nginx/html;
            # try_files $uri /index.html =404;
        }

        # Allow non-HTTPS to graphql (and redirected PHP) until we are able we have verified all clients are upgraded
        # location ~ /(api|graphql) {
        #     try_files $uri $uri/ /index.php?$query_string;
        # }
        # location ~ \.php$ {
        #     include partials/php.conf;
        # }

        # Redirect all other traffic to HTTPS
        # location / {
        #     return 301 https://$host$request_uri;
        # }
    }
}


